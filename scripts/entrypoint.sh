#!/bin/bash
"""
Script de entrada para aguardar o DynamoDB antes de iniciar a aplica√ß√£o
"""

set -e

echo "üöÄ Iniciando script de entrada..."

# Se estivermos usando DynamoDB local, aguarda ele estar pronto
if [ ! -z "$DYNAMODB_ENDPOINT" ]; then
    echo "üîÑ DynamoDB local detectado: $DYNAMODB_ENDPOINT"
    echo "‚è≥ Aguardando DynamoDB estar pronto..."
    
    # Fun√ß√£o para testar se DynamoDB est√° pronto
    wait_for_dynamodb() {
        for i in {1..30}; do
            if curl -f -s "$DYNAMODB_ENDPOINT" > /dev/null 2>&1; then
                echo "‚úÖ DynamoDB est√° pronto!"
                return 0
            fi
            echo "   Tentativa $i/30 - Aguardando DynamoDB..."
            sleep 2
        done
        echo "‚ùå DynamoDB n√£o ficou pronto ap√≥s 60 segundos"
        return 1
    }
    
    # Aguarda DynamoDB estar pronto
    if ! wait_for_dynamodb; then
        echo "‚ùå Falha ao conectar com DynamoDB"
        exit 1
    fi
    
    # Aguarda um pouco mais para garantir que est√° completamente pronto
    echo "‚è≥ Aguardando estabiliza√ß√£o do DynamoDB..."
    sleep 5
    
    echo "üóÑÔ∏è  Preparando ambiente do banco de dados..."
    poetry run python -c "
import asyncio
import sys
import os
sys.path.append('/app')
from scripts.wait_for_dynamodb import main
asyncio.run(main())
" || echo "‚ö†Ô∏è  Aviso: Erro na prepara√ß√£o do banco, mas continuando..."

fi

echo "üéâ Iniciando aplica√ß√£o FastAPI..."

# Executa o comando passado como argumentos
exec "$@"
